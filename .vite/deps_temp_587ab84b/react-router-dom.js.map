{
  "version": 3,
  "sources": ["../../node_modules/react-router-dom/dom.ts", "../../node_modules/react-router-dom/index.tsx"],
  "sourcesContent": ["import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  options: SubmitOptions,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string | null = null;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr = target.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr =\n        target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || null;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<FutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(\n  fetcherKey?: string,\n  fetcherRouteId?: string\n): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { action, method, encType, formData } = getFormSubmissionInfo(\n        target,\n        options,\n        basename\n      );\n\n      // Base options shared between fetch() and navigate()\n      let opts = {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as HTMLFormMethod,\n        formEncType: encType as FormEncType,\n      };\n\n      if (fetcherKey) {\n        invariant(\n          fetcherRouteId != null,\n          \"No routeId available for useFetcher()\"\n        );\n        router.fetch(fetcherKey, fetcherRouteId, action, opts);\n      } else {\n        router.navigate(action, {\n          ...opts,\n          replace: options.replace,\n          fromRouteId: currentRouteId,\n        });\n      }\n    },\n    [router, basename, fetcherKey, fetcherRouteId, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No router available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["defaultMethod", "defaultEncType", "isHtmlElement", "object", "tagName", "isButtonElement", "toLowerCase", "isFormElement", "isInputElement", "isModifiedEvent", "event", "metaKey", "altKey", "ctrlKey", "shiftKey", "shouldProcessLinkClick", "target", "button", "createSearchParams", "init", "URLSearchParams", "Array", "isArray", "Object", "keys", "reduce", "memo", "key", "value", "concat", "map", "v", "getSearchParamsForLocation", "locationSearch", "defaultSearchParams", "searchParams", "has", "getAll", "forEach", "append", "getFormSubmissionInfo", "options", "basename", "method", "action", "encType", "formData", "submissionTrigger", "attr", "getAttribute", "stripBasename", "FormData", "name", "type", "form", "Error", "createBrowserRouter", "routes", "opts", "createRouter", "future", "v7_prependBasename", "history", "createBrowserHistory", "window", "hydrationData", "parseHydrationData", "mapRouteProperties", "initialize", "createHashRouter", "createHashHistory", "state", "__staticRouterHydrationData", "errors", "deserializeErrors", "entries", "serialized", "val", "__type", "ErrorResponse", "status", "statusText", "data", "internal", "error", "message", "stack", "BrowserRouter", "children", "historyRef", "useRef", "current", "v5Compat", "setState", "useState", "location", "React", "useLayoutEffect", "listen", "createElement", "Router", "navigationType", "navigator", "HashRouter", "HistoryRouter", "displayName", "isBrowser", "document", "ABSOLUTE_URL_REGEX", "Link", "forwardRef", "LinkWithRef", "ref", "onClick", "relative", "reloadDocument", "replace", "to", "preventScrollReset", "rest", "useContext", "NavigationContext", "absoluteHref", "isExternal", "test", "currentUrl", "URL", "href", "targetUrl", "startsWith", "protocol", "path", "pathname", "origin", "search", "hash", "e", "warning", "useHref", "internalOnClick", "useLinkClickHandler", "handleClick", "defaultPrevented", "NavLink", "NavLinkWithRef", "ariaCurrentProp", "caseSensitive", "className", "classNameProp", "end", "style", "styleProp", "useResolvedPath", "useLocation", "routerState", "DataRouterStateContext", "toPathname", "encodeLocation", "locationPathname", "nextLocationPathname", "navigation", "isActive", "charAt", "length", "isPending", "ariaCurrent", "undefined", "filter", "Boolean", "join", "Form", "props", "FormImpl", "forwardedRef", "onSubmit", "fetcherKey", "routeId", "submit", "useSubmitImpl", "formMethod", "formAction", "useFormAction", "submitHandler", "preventDefault", "submitter", "nativeEvent", "submitMethod", "currentTarget", "ScrollRestoration", "getKey", "storageKey", "useScrollRestoration", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "DataRouterContext", "invariant", "useDataRouterState", "replaceProp", "navigate", "useNavigate", "useCallback", "createPath", "useSearchParams", "defaultInit", "defaultSearchParamsRef", "hasSetSearchParamsRef", "useMemo", "setSearchParams", "nextInit", "navigateOptions", "newSearchParams", "useSubmit", "fetcherRouteId", "router", "UseSubmitImpl", "currentRouteId", "useRouteId", "formEncType", "fetch", "fromRouteId", "routeContext", "RouteContext", "match", "matches", "slice", "route", "index", "params", "delete", "toString", "joinPaths", "createFetcherForm", "FetcherForm", "fetcherId", "useFetcher", "UseFetcher", "id", "String", "load", "fetcher", "getFetcher", "fetcherWithComponents", "useEffect", "console", "warn", "deleteFetcher", "useFetchers", "UseFetchers", "fetchers", "values", "SCROLL_RESTORATION_STORAGE_KEY", "savedScrollPositions", "UseScrollRestoration", "restoreScrollPosition", "useMatches", "useNavigation", "scrollRestoration", "usePageHide", "scrollY", "sessionStorage", "setItem", "JSON", "stringify", "sessionPositions", "getItem", "parse", "disableScrollRestoration", "enableScrollRestoration", "scrollTo", "el", "getElementById", "scrollIntoView", "useBeforeUnload", "callback", "capture", "addEventListener", "removeEventListener", "usePrompt", "when", "blocker", "useBlocker", "reset", "proceed", "confirm", "setTimeout"]
}
